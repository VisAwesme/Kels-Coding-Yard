<#
.SUPERDUPERIMPORTANT
This script was for some reason, flagged as malware?... I do not know how, but I can say this is not malware this is just meant for deleting MEMZ.exe, thats it nothing else.
.IMPORTANT
Before running this, to permit powershell to run local files run this command "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
" as adminstator.
.SYNOPSIS
    Forcefully terminates all processes named "memz.exe" or "memez.exe" simultaneously.
.DESCRIPTION
    This script searches for running processes with names that match "memz.exe" or "memez.exe". 
    It then launches background jobs to kill them all in parallel to minimize any delay that could 
    let the malware progress to a more dangerous "Phase 2". 
    Designed for use in a controlled environment (e.g., a triage VM).
.NOTES
    Run this script with Administrator privileges.
#>

# Ensure the script is running as Administrator
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
{
    Write-Error "This script must be run as Administrator. Please run it using 'Run as Administrator'."
    exit 1
}

# Define the process name variants to target
# (i recomend adding more forms of memz.exe on here using wild cards, it tends to change its lettering.)
$processNames = @(
    "memz.exe",       # Standard process name
    "memez.exe",      # Common typo
    "MEMZ*.exe",      # Catch variations of MEMZ (including upper/lower case and any additional characters)
    "memz*.exe",      # Catch memz.exe and any variations of it
    "memez*.exe",     # Catch memez.exe and any variations of it
    "MEMEZ*.exe",     # Extra variation for memez with a possible typo
    "memz.exe*",      # Matches any process with 'memz.exe' and additional characters
    "memez.exe*"      # Matches any process with 'memez.exe' and additional characters
    "memz.exe 32*"    # Match variations with "memz.exe 32" (e.g., 32-bit)
)


# Array to hold background jobs
$jobs = @()

Write-Host "Searching for malicious processes..." -ForegroundColor Cyan

foreach ($name in $processNames) {
    # Get processes matching the name (case-insensitive)
    $procs = Get-Process -Name $name -ErrorAction SilentlyContinue
    if ($procs) {
        foreach ($proc in $procs) {
            Write-Host "Scheduling kill for $($proc.Name) (PID: $($proc.Id))" -ForegroundColor Yellow
            # Start a background job to kill this process
            $job = Start-Job -ScriptBlock {
                param($pid)
                try {
                    # Check if the process is a parent process
                    $childProcs = Get-WmiObject Win32_Process -Filter "ParentProcessId=$pid"
                    if ($childProcs) {
                        foreach ($childProc in $childProcs) {
                            Stop-Process -Id $childProc.ProcessId -Force -ErrorAction Stop
                            Write-Output "Killed child process with PID $($childProc.ProcessId)"
                        }
                    }
                    # Kill the parent process
                    Stop-Process -Id $pid -Force -ErrorAction Stop
                    Write-Output "Killed process with PID $pid"
                }
                catch {
                    Write-Output "Failed to kill process with PID $pid: $_"
                }
            } -ArgumentList $proc.Id
            $jobs += $job
        }
    }
    else {
        Write-Host "No processes found matching: $name" -ForegroundColor Green
    }
}

# Wait for all jobs to complete
if ($jobs.Count -gt 0) {
    Write-Host "Waiting for all kill jobs to finish..." -ForegroundColor Cyan
    Wait-Job -Job $jobs
    # Optionally, output the results of each job
    foreach ($job in $jobs) {
        Receive-Job -Job $job
    }
    # Verify if any instance is still running
    $remaining = @()
    foreach ($name in $processNames) {
        $remaining += Get-Process -Name $name -ErrorAction SilentlyContinue
    }
    if ($remaining.Count -eq 0) {
        Write-Host "All instances of memz.exe/memez.exe have been terminated." -ForegroundColor Green
    }
    else {
        Write-Warning "Some instances may still be running!"
    }
}
else {
    Write-Host "No malicious processes were found to terminate." -ForegroundColor Green
}

Write-Host "Script execution completed." -ForegroundColor Cyan
